java.util.LinkedList#add(E) 将指定元素附加到此列表的末尾
    public boolean add(E e) {
        linkLast(e);
        return true;
    }

    // 链接 e 作为最后一个元素。
    void linkLast(E e) {
        final Node<E> l = last; // last是指向最后一个节点的指针。
        final Node<E> newNode = new Node<>(l, e, null); //把最后一个节点的指针赋给该节点的前驱指针
        last = newNode; //last指向新节点
        if (l == null)
            first = newNode;
        else
            l.next = newNode;
        size++;
        modCount++;
    }

java.util.LinkedList.Node
    private static class Node<E> {
        E item;
        Node<E> next;
        Node<E> prev;

        Node(Node<E> prev, E element, Node<E> next) {
            this.item = element;
            this.next = next;
            this.prev = prev;
        }
    }

java.util.LinkedList#add(int, E) 在此列表中的指定位置插入指定元素。将当前位于该位置的元素（如果有）和任何后续元素向右移动（将它们的索引加一）。
    public void add(int index, E element) {
        checkPositionIndex(index); // index >= 0 && index <= size

        if (index == size)
            linkLast(element);
        else
            linkBefore(element, node(index));
    }
    private void checkPositionIndex(int index) {
        if (!isPositionIndex(index))
            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));
    }
    private boolean isPositionIndex(int index) {
        return index >= 0 && index <= size;
    }
    
    //返回指定元素索引处的（非空）节点
    Node<E> node(int index) {
        // assert isElementIndex(index);
        //分两部分查询，如果index在该LinkedList前半部分，则正序遍历，反之倒序遍历。
        if (index < (size >> 1)) {
            Node<E> x = first;
            for (int i = 0; i < index; i++)
                x = x.next;
            return x;
        } else {
            Node<E> x = last;
            for (int i = size - 1; i > index; i--)
                x = x.prev;
            return x;
        }
    }

    // 在非空节点 succ 之前插入元素 e
    void linkBefore(E e, Node<E> succ) {
        // assert succ != null;
        final Node<E> pred = succ.prev; //暂存succ的前驱节点
        final Node<E> newNode = new Node<>(pred, e, succ); //e节点的前驱节点是succ的前驱节点、后继节点是succ
        succ.prev = newNode; //修改succ的前驱节点为e
        if (pred == null)
            first = newNode;
        else
            pred.next = newNode; //修改succ的前驱节点的后继节点为e
        size++;
        modCount++;
    }

java.util.LinkedList#addAll(java.util.Collection<? extends E>) 按照指定集合的​​迭代器返回的顺序，将指定集合中的所有元素附加到此列表的末尾。
    public boolean addAll(Collection<? extends E> c) {
        return addAll(size, c);
    }
    //将指定集合中的所有元素插入此列表，从指定位置开始。
    //将当前位于该位置的元素（如果有）和任何后续元素向右移动（增加它们的索引）。
    //新元素将按照指定集合的​​迭代器返回的顺序出现在列表中。
    public boolean addAll(int index, Collection<? extends E> c) {
        checkPositionIndex(index);

        Object[] a = c.toArray();
        int numNew = a.length;
        if (numNew == 0)
            return false;

        Node<E> pred, succ;
        if (index == size) {
            succ = null;
            pred = last;
        } else {
            succ = node(index);
            pred = succ.prev;
        }

        for (Object o : a) {
            @SuppressWarnings("unchecked") E e = (E) o;
            Node<E> newNode = new Node<>(pred, e, null);
            if (pred == null)
                first = newNode;
            else
                pred.next = newNode;
            pred = newNode;
        }

        if (succ == null) {
            last = pred;
        } else {
            pred.next = succ;
            succ.prev = pred;
        }

        size += numNew;
        modCount++;
        return true;
    }

java.util.LinkedList#addFirst 在此列表的开头插入指定元素
    public void addFirst(E e) {
        linkFirst(e);
    }

    private void linkFirst(E e) {
        final Node<E> f = first;
        final Node<E> newNode = new Node<>(null, e, f);
        first = newNode;
        if (f == null)
            last = newNode;
        else
            f.prev = newNode;
        size++;
        modCount++;
    }

java.util.LinkedList#addLast 将指定元素附加到此列表的末尾。此方法等效于add 。
    public void addLast(E e) {
        linkLast(e);
    }

java.util.LinkedList#clear 从此列表中删除所有元素。此调用返回后，列表将为空。
    public void clear() {
        // Clearing all of the links between nodes is "unnecessary", but:
        // - helps a generational GC if the discarded nodes inhabit
        //   more than one generation
        // - is sure to free memory even if there is a reachable Iterator
        for (Node<E> x = first; x != null; ) {
            Node<E> next = x.next;
            x.item = null;
            x.next = null;
            x.prev = null;
            x = next;
        }
        first = last = null;
        size = 0;
        modCount++;
    }

java.util.LinkedList#clone 返回此LinkedList的浅表副本。 （元素本身不会被克隆。）
    public Object clone() {
        LinkedList<E> clone = superClone();

        // Put clone into "virgin" state
        clone.first = clone.last = null;
        clone.size = 0;
        clone.modCount = 0;

        // Initialize clone with our elements
        for (Node<E> x = first; x != null; x = x.next)
            clone.add(x.item);

        return clone;
    }

java.util.LinkedList#contains 如果此列表包含指定元素，则返回true 。
    public boolean contains(Object o) {
        return indexOf(o) != -1;
    }

    //返回此列表中指定元素第一次出现的索引，如果此列表不包含该元素，则返回 -1。
    public int indexOf(Object o) {
        int index = 0;
        if (o == null) {
            for (Node<E> x = first; x != null; x = x.next) {
                if (x.item == null)
                    return index;
                index++;
            }
        } else {
            for (Node<E> x = first; x != null; x = x.next) {
                if (o.equals(x.item))
                    return index;
                index++;
            }
        }
        return -1;
    }

java.util.LinkedList#element 检索但不删除此列表的头部（第一个元素）。
    public E element() {
        return getFirst();
    }
    
    //返回此列表中的第一个元素。
    public E getFirst() {
        final Node<E> f = first;
        if (f == null)
            throw new NoSuchElementException();
        return f.item;
    }

java.util.LinkedList#get 返回此列表中指定位置的元素。
    public E get(int index) {
        checkElementIndex(index); // index >= 0 && index < size
        return node(index).item;
    }

java.util.LinkedList#getLast 返回此列表中的最后一个元素。
    public E getLast() {
        final Node<E> l = last;
        if (l == null)
            throw new NoSuchElementException();
        return l.item;
    }

java.util.LinkedList#lastIndexOf 返回此列表中指定元素最后一次出现的索引，如果此列表不包含该元素，则返回 -1。
    public int lastIndexOf(Object o) {
        int index = size;
        if (o == null) {
            for (Node<E> x = last; x != null; x = x.prev) {
                index--;
                if (x.item == null)
                    return index;
            }
        } else {
            for (Node<E> x = last; x != null; x = x.prev) {
                index--;
                if (o.equals(x.item))
                    return index;
            }
        }
        return -1;
    }

java.util.LinkedList#listIterator 返回此列表中元素的列表迭代器（按正确顺序），从列表中的指定位置开始。
    public ListIterator<E> listIterator(int index) {
        checkPositionIndex(index);
        return new ListItr(index);
    }

java.util.LinkedList#offer //添加指定元素作为此列表的尾部（最后一个元素）。
    public boolean offer(E e) {
        return add(e);
    }

java.util.LinkedList#offerFirst //在此列表的前面插入指定的元素
    public boolean offerFirst(E e) {
        addFirst(e);
        return true;
    }

java.util.LinkedList#offerLast //在此列表的末尾插入指定的元素。
    public boolean offerLast(E e) {
        addLast(e);
        return true;
    }

java.util.LinkedList#peek //检索但不删除此列表的头部（第一个元素）
    public E peek() {
        final Node<E> f = first;
        return (f == null) ? null : f.item;
    }

java.util.LinkedList#peekFirst //检索但不删除此列表的第一个元素，如果此列表为空，则返回null 。
    public E peekFirst() {
        final Node<E> f = first;
        return (f == null) ? null : f.item;
     }

java.util.LinkedList#peekLast //检索但不删除此列表的最后一个元素，如果此列表为空，则返回null 。
    public E peekLast() {
        final Node<E> l = last;
        return (l == null) ? null : l.item;
    }

java.util.LinkedList#poll //检索并删除此列表的头部（第一个元素）。
    public E poll() {
        final Node<E> f = first;
        return (f == null) ? null : unlinkFirst(f);
    }

    //取消非空第一个节点 f 的链接。
    private E unlinkFirst(Node<E> f) {
        // assert f == first && f != null;
        final E element = f.item;
        final Node<E> next = f.next;
        f.item = null;
        f.next = null; // help GC
        first = next;
        if (next == null)
            last = null;
        else
            next.prev = null;
        size--;
        modCount++;
        return element;
    }

java.util.LinkedList#pollFirst 检索并删除此列表的第一个元素，如果此列表为空，则返回null 。
    public E pollFirst() {
        final Node<E> f = first;
        return (f == null) ? null : unlinkFirst(f);
    }

java.util.LinkedList#pollLast 检索并删除此列表的最后一个元素，如果此列表为空，则返回null 。
    public E pollLast() {
        final Node<E> l = last;
        return (l == null) ? null : unlinkLast(l);
    }

    //取消非空最后一个节点 l 的链接。
    private E unlinkLast(Node<E> l) {
        // assert l == last && l != null;
        final E element = l.item;
        final Node<E> prev = l.prev;
        l.item = null;
        l.prev = null; // help GC
        last = prev;
        if (prev == null)
            first = null;
        else
            prev.next = null;
        size--;
        modCount++;
        return element;
    }

java.util.LinkedList#pop 从此列表表示的堆栈中弹出一个元素。换句话说，删除并返回此列表的第一个元素。此方法等效于removeFirst() 。
    public E pop() {
        return removeFirst();
    }

    //从此列表中删除并返回第一个元素。
    public E removeFirst() {
        final Node<E> f = first;
        if (f == null)
            throw new NoSuchElementException();
        return unlinkFirst(f);
    }

java.util.LinkedList#push 将元素推送到此列表表示的堆栈上。换句话说，在这个列表的前面插入元素。此方法等效于addFirst 。
    public void push(E e) {
        addFirst(e);
    }

java.util.LinkedList#remove() 检索并删除此列表的头部（第一个元素）。
    public E remove() {
        return removeFirst();
    }

java.util.LinkedList#remove(int) 移除此列表中指定位置的元素。将任何后续元素向左移动（从它们的索引中减去 1）。返回从列表中删除的元素。
    public E remove(int index) {
        checkElementIndex(index);
        return unlink(node(index));
    }

    //取消非空节点 x 的链接
    E unlink(Node<E> x) {
        // assert x != null;
        final E element = x.item;
        final Node<E> next = x.next;
        final Node<E> prev = x.prev;

        if (prev == null) {
            first = next;
        } else {
            prev.next = next;
            x.prev = null;
        }

        if (next == null) {
            last = prev;
        } else {
            next.prev = prev;
            x.next = null;
        }

        x.item = null;
        size--;
        modCount++;
        return element;
    }

java.util.LinkedList#remove(java.lang.Object) 从此列表中删除第一次出现的指定元素（如果存在）。如果此列表不包含该元素，则它不变。
    public boolean remove(Object o) {
        if (o == null) {
            for (Node<E> x = first; x != null; x = x.next) {
                if (x.item == null) {
                    unlink(x);
                    return true;
                }
            }
        } else {
            for (Node<E> x = first; x != null; x = x.next) {
                if (o.equals(x.item)) {
                    unlink(x);
                    return true;
                }
            }
        }
        return false;
    }

java.util.LinkedList#removeFirstOccurrence 删除此列表中第一次出现的指定元素（从头到尾遍历列表时）。如果列表不包含该元素，则它不变。
    public boolean removeFirstOccurrence(Object o) {
        return remove(o);
    }

java.util.LinkedList#removeLastOccurrence 删除此列表中指定元素的最后一次出现（从头到尾遍历列表时）。如果列表不包含该元素，则它不变。
    public boolean removeLastOccurrence(Object o) {
        if (o == null) {
            for (Node<E> x = last; x != null; x = x.prev) {
                if (x.item == null) {
                    unlink(x);
                    return true;
                }
            }
        } else {
            for (Node<E> x = last; x != null; x = x.prev) {
                if (o.equals(x.item)) {
                    unlink(x);
                    return true;
                }
            }
        }
        return false;
    }

java.util.LinkedList#set 将此列表中指定位置的元素替换为指定元素。
    public E set(int index, E element) {
        checkElementIndex(index);
        Node<E> x = node(index);
        E oldVal = x.item;
        x.item = element;
        return oldVal;
    }

java.util.LinkedList#size 返回此列表中的元素数。
    public int size() {
        return size;
    }

java.util.LinkedList#spliterator 在此列表中的元素上创建一个后期绑定和快速失败的Spliterator 。
    public Spliterator<E> spliterator() {
        return new LLSpliterator<E>(this, -1, 0);
    }

java.util.LinkedList#toArray() 以正确的顺序（从第一个元素到最后一个元素）返回包含此列表中所有元素的数组。
    public Object[] toArray() {
        Object[] result = new Object[size];
        int i = 0;
        for (Node<E> x = first; x != null; x = x.next)
            result[i++] = x.item;
        return result;
    }

java.util.LinkedList#toArray(T[]) 以正确的顺序（从第一个元素到最后一个元素）返回一个包含此列表中所有元素的数组；返回数组的运行时类型是指定数组的运行时类型。
    public <T> T[] toArray(T[] a) {
        if (a.length < size)
            a = (T[])java.lang.reflect.Array.newInstance(
                                a.getClass().getComponentType(), size);
        int i = 0;
        Object[] result = a;
        for (Node<E> x = first; x != null; x = x.next)
            result[i++] = x.item;

        if (a.length > size)
            a[size] = null;

        return a;
    }